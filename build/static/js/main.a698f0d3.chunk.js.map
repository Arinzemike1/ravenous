{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","href","this","props","business","name","target","rel","src","imageSrc","alt","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","handleTermChange","bind","handleLocationChange","handleSearch","handleKeyPress","sortByOptions","sortByOption","sortBy","setState","event","term","value","location","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onKeyPress","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","console","log","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a698f0d3.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n    render() {\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <a href={\"https://www.google.com/search?q=\" + this.props.business.name} target=\"_blank\" rel=\"noopener noreferrer\"><img src={this.props.business.imageSrc} alt='' /></a>\n                </div>\n                <h2>{this.props.business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <a href={\"https://www.google.com/maps/place/\" + this.props.business.address} target=\"_blank\" rel=\"noopener noreferrer\">\n                            <p>{this.props.business.address}</p>\n                            <p>{this.props.business.city}</p>\n                            <p>{this.props.business.state} {this.props.business.zipCode}</p>\n                        </a>\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{this.props.business.category}</h3>\n                        <h3 className=\"rating\">{this.props.business.rating} stars</h3>\n                        <p>{this.props.business.reviewCount} reviews</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {\n                    this.props.businesses.map(business => {\n                        return <Business key={business.id} business={business} />;\n                    })\n                }\n            </div>\n        );\n    }\n}\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n     constructor(props) {\n         super(props);\n         this.state = {\n             'term': ' ',\n             'location': ' ',\n             'sortBy': 'best_match',\n         };\n         this.handleTermChange = this.handleTermChange.bind(this);\n         this.handleLocationChange = this.handleLocationChange.bind(this);\n         this.handleSearch = this.handleSearch.bind(this);\n         this.handleKeyPress = this.handleKeyPress.bind(this);\n         \n         this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n        };        \n     }\n      \n     getSortByClass(sortByOption) {\n         if (this.state.sortBy === sortByOption) {\n             return 'active';\n         }\n         else {\n            return ' ';\n         }\n     }\n     handleSortByChange(sortByOption) {\n         this.setState({ sortBy: sortByOption });\n     }\n     handleTermChange(event) {\n        this.setState({ term: event.target.value });\n     }\n     handleLocationChange(event) {\n        this.setState({ location: event.target.value });\n     }\n     handleSearch(event) {\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        event.preventDefault();     \n     }\n     handleKeyPress(event) {\n         if (event.key === 'Enter') {       \n             this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n             event.preventDefault();\n         }\n     }\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n           let sortByOptionValue = this.sortByOptions[sortByOption];\n            return (\n                <li className={this.getSortByClass(sortByOptionValue)}\n                    key={sortByOptionValue}\n                    onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\n                    {sortByOption}\n                </li>\n            );\n        });        \n    }\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul onClick={this.handleSearch}>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input onKeyPress={this.handleKeyPress} onChange={this.handleTermChange} placeholder=\"Search Food\" />\n                    <input onKeyPress={this.handleKeyPress} onChange={this.handleLocationChange} placeholder=\"Where?\" />\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a onClick={this.handleSearch}>Let's Go</a>\n                </div>\n            </div>\n        );\n    }\n}\nexport default SearchBar;","import Axios from 'axios';\n\nconst apiKey = 'IrpYJ0Y1izkugouGnZnYcufaCupkZDdsaIW2Ry-dmxe3KW4kljy2DlpqtP-u-HVbcj6nN0I8LGo1W1jgIKXETVZdpc71YcfRlFpddI0ufCIxgcm-FvaDsbr3ihMQX3Yx';\n\nconst Yelp = {\n  search(term, location, sortBy) {\n    return fetch(`/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse.businesses) {\n        return jsonResponse.businesses.map(business => ({\n          id: business.id,\n          imageSrc: business.image_url,\n          name: business.name,\n          address: business.location.address1,\n          city: business.location.city,\n          state: business.location.state,\n          zipCode: business.location.zip_code,\n          category: business.categories[0].title,\n          rating: business.rating,\n          reviewCount: business.review_count\n        }));\n      }\n    });\n  }\n};\n\nexport default Yelp;\n","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({ businesses: businesses });\n    });\n  }\n  render() {\n    console.log(this.state.businesses);    \n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp = {this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}